# -*- mode: ruby -*-
# vi: set ft=ruby :

BOX_IMAGE = "jeffnoxon/ubuntu-20.04-arm64"
BOX_VERSION = "1.0.0"
MASTER_NAME = "control-plane"
MASTER_IP = "192.168.100.2"

RUNC_VERSION = "1.1.7"
CONTAINERD_VERSION="1.6.20"
CNI_VERSION="1.2.0"
K8S_VERSION="1.26.4-00"

JOIN_FILE="/vagrant/join.sh"


Vagrant.configure("2") do |config|
  config.vm.box = BOX_IMAGE
  config.vm.box_version = BOX_VERSION
  config.vm.provider :parallels do |v|
    v.memory = 4096
    v.cpus = 4
  end
  config.vm.provision :shell, privileged: true, env: {"RUNC_VERSION"=>RUNC_VERSION,"CONTAINERD_VERSION"=>CONTAINERD_VERSION,"CNI_VERSION"=>CNI_VERSION,"K8S_VERSION"=>K8S_VERSION}, inline: $pre_install

  config.vm.define MASTER_NAME do |master|
    master.vm.hostname = MASTER_NAME
    master.vm.network :private_network, ip: MASTER_IP
    master.vm.provision :shell, privileged: false, env: {"MASTER_NAME"=>MASTER_NAME,"JOIN_FILE"=>JOIN_FILE}, inline: $provision_master
 end
end

# privileged: false (vagrant)
$provision_master = <<-SCRIPT
rm -rf $JOIN_FILE

echo ">>>> kubeadm init <<<<"
sudo kubeadm init --apiserver-advertise-address=192.168.100.2 --apiserver-cert-extra-sans=192.168.100.2 --pod-network-cidr=10.224.0.0/16 --service-cidr=10.225.0.0/16 --node-name=${MASTER_NAME} | grep -A1 "kubeadm join" > ${JOIN_FILE}

# join file
chmod +x ${JOIN_FILE}
echo "${JOIN_FILE} created"

# kubeconfig
mkdir -p $HOME/.kube
sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# flannel
wget -qO kube-flannel.yml https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
sed -i.bak 's/10.244.0.0/10.224.0.0/g' kube-flannel.yml
sed -i.bak '/- --kube-subnet-mgr/a \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ - --iface=eth1' kube-flannel.yml
kubectl create -f kube-flannel.yml
SCRIPT

# privileged: true (root)
$pre_install = <<-SCRIPT
export DEBIAN_FRONTEND=noninteractive

ARCH=$(dpkg --print-architecture)

echo ">>>> pre-requisite <<<<"

echo "# Set br_netfilter, ip_forward"
cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system

echo "# Swap OFF"
swapoff -a
sed -i.bak '/swap/d' /etc/fstab

echo ">>>> pre-install <<<<"

echo "# install runC"

echo "## download https://github.com/opencontainers/runc/releases/download/v${RUNC_VERSION}/runc.${ARCH}"
wget -q https://github.com/opencontainers/runc/releases/download/v${RUNC_VERSION}/runc.${ARCH}
install -m 755 runc.${ARCH} /usr/local/sbin/runc

echo "# install containerd"

CONTAINERD_TAR="containerd-${CONTAINERD_VERSION}-linux-${ARCH}.tar.gz"
echo "## download https://github.com/containerd/containerd/releases/download/v${CONTAINERD_VERSION}/${CONTAINERD_TAR}"
wget -q https://github.com/containerd/containerd/releases/download/v${CONTAINERD_VERSION}/${CONTAINERD_TAR}
tar Cxzvf /usr/local ${CONTAINERD_TAR}

wget -q https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
mv containerd.service /usr/lib/systemd/system/
systemctl daemon-reload
systemctl enable --now containerd

mkdir -p /etc/containerd
containerd config default | tee /etc/containerd/config.toml
sed -i.bak 's/SystemdCgroup \\= false/SystemdCgroup \\= true/g' /etc/containerd/config.toml
systemctl restart containerd

echo "# install CNI"

CNI_TAR="cni-plugins-linux-${ARCH}-v${CNI_VERSION}.tgz"
mkdir -p /opt/cni/bin/
wget -q https://github.com/containernetworking/plugins/releases/download/v${CNI_VERSION}/${CNI_TAR}
tar Cxzvf /opt/cni/bin ${CNI_TAR}

echo ">>>> Kubernetes <<<<"

apt -qq update
apt -qq install -y apt-transport-https ca-certificates curl

curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
apt -qq update

apt -qq install -y kubelet=${K8S_VERSION} kubeadm=${K8S_VERSION} kubectl=${K8S_VERSION}
apt-mark hold kubelet kubeadm kubectl

IP_ADDR=`ip addr show eth1 | grep /24 | awk '{print $2}'`
echo "KUBELET_EXTRA_ARGS=--node-ip=\"$IP_ADDR\"" | tee /etc/default/kubelet
systemctl restart kubelet

SCRIPT


